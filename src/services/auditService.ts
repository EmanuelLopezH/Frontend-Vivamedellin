/**
 * Sistema de auditor칤a para registrar eliminaciones de comentarios
 * Cumple con el criterio: "El sistema debe registrar la acci칩n de eliminaci칩n para auditor칤a"
 * 
 * Los datos registrados incluyen:
 * - Id del comentario eliminado
 * - Usuario autor del comentario  
 * - Administrador que elimin칩 el comentario
 * - Fecha y hora de la eliminaci칩n
 * - Motivo de la eliminaci칩n
 * - Contenido del comentario
 */

export interface CommentDeletionAuditLog {
  id: number                    // ID 칰nico del registro de auditor칤a
  commentId: number             // ID del comentario eliminado
  commentAuthorName: string     // Nombre del autor del comentario
  commentContent: string        // Contenido del comentario eliminado
  deletedByName: string         // Nombre del administrador que elimin칩
  deletedByRole: 'admin' | 'user' // Rol del usuario que elimin칩
  deletionReason: string        // Motivo de eliminaci칩n proporcionado
  deletionDate: string          // Fecha y hora de eliminaci칩n (ISO string)
  eventId: number               // ID del evento al que pertenec칤a el comentario
}

// Almac칠n en memoria para el mock (en producci칩n ser칤a una base de datos)
const auditLogs: CommentDeletionAuditLog[] = (() => {
  // Intentar cargar desde localStorage para persistencia durante desarrollo
  const stored = localStorage.getItem("commentDeletionAuditLogs")
  return stored ? JSON.parse(stored) : []
})()

let nextAuditId = auditLogs.length + 1

/**
 * Registra una eliminaci칩n de comentario en el log de auditor칤a
 * @param logData - Datos de la eliminaci칩n a registrar
 * @returns Promise con el registro de auditor칤a creado
 */
export async function createDeletionAuditLog(
  logData: Omit<CommentDeletionAuditLog, 'id' | 'deletionDate'>
): Promise<CommentDeletionAuditLog> {
  return new Promise((resolve) => {
    setTimeout(() => {
      const auditRecord: CommentDeletionAuditLog = {
        id: nextAuditId++,
        ...logData,
        deletionDate: new Date().toISOString(),
      }
      
      auditLogs.unshift(auditRecord) // Agregar al inicio para mostrar m치s recientes primero
      
      // Persistir en localStorage para desarrollo
      localStorage.setItem("commentDeletionAuditLogs", JSON.stringify(auditLogs))
      
      console.log("游댌 [AUDIT LOG] Comentario eliminado:", auditRecord)
      resolve(auditRecord)
    }, 100) // Simular delay de red
  })
}

/**
 * Obtiene todos los registros de auditor칤a de eliminaciones
 * @returns Promise con array de registros de auditor칤a
 */
export async function getAuditLogs(): Promise<CommentDeletionAuditLog[]> {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([...auditLogs])
    }, 100)
  })
}

/**
 * Obtiene registros de auditor칤a filtrados por evento
 * @param eventId - ID del evento
 * @returns Promise con registros de auditor칤a del evento
 */
export async function getAuditLogsByEvent(eventId: number): Promise<CommentDeletionAuditLog[]> {
  return new Promise((resolve) => {
    setTimeout(() => {
      const eventLogs = auditLogs.filter(log => log.eventId === eventId)
      resolve(eventLogs)
    }, 100)
  })
}

/**
 * Limpia todos los logs de auditor칤a (solo para desarrollo/testing)
 */
export async function clearAuditLogs(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      auditLogs.length = 0
      localStorage.removeItem("commentDeletionAuditLogs")
      console.log("游빛 [AUDIT LOG] Logs de auditor칤a limpiados")
      resolve()
    }, 100)
  })
}